[
    "test",
    "more",
    "then",
    "1 + 1"
]

=========

[
    "test",
    "more",
    "then",
    "1 + 1",
    "function my_add(a, b) { return a + b }\n\nmy_add(2, 3)\n"
]

====

[
    "test",
    "more",
    "then",
    "1 + 1",
    "function my_add(a, b) { return a + b }\n\nmy_add(2, 3)\n",
    "requirejs([\"vendor/mithril\"], function(mIgnore) {\n    const root = document.body\n\n    const Archive = {\n        editorContents: \"\",\n        lastLoadedContents: \"\",\n        items: [],\n        previousNextIndex: 0,\n\n        setEditorContents(newContents) {\n            Archive.editorContents = newContents\n            Archive.lastLoadedContents = newContents\n        },\n\n        add: function() {\n            Archive.items.push(Archive.editorContents)\n            Archive.setEditorContents(\"\")\n        },\n\n        confirmClear: function(promptText) {\n            if (!Archive.editorContents) return true\n            if (Archive.editorContents === Archive.lastLoadedContents) return true\n            if (!promptText) promptText = \"You have unsaved editor changes. Proceed?\"\n            return confirm(promptText)\n        },\n\n        clear: function() {\n            if (!Archive.confirmClear()) return\n            Archive.setEditorContents(\"\")\n        },\n\n        eval: function () {\n            Archive.setEditorContents(Archive.editorContents + \"\\n\" + eval(Archive.editorContents))\n        },\n\n        skip: function (offset) {\n            if (!Archive.items.length) return\n            Archive.previousNextIndex = (Archive.items.length + Archive.previousNextIndex + offset) % Archive.items.length\n            console.log(\"Archive.previousNextIndex\", Archive.previousNextIndex)\n            Archive.setEditorContents(Archive.items[Archive.previousNextIndex])\n        },\n\n        previous: function () { Archive.skip(-1) },\n\n        next: function () { Archive.skip(1) },\n\n        textForLog: function() {\n            return JSON.stringify(Archive.items, null, 4)\n        },\n\n        showLog: function () {\n            console.log(\"items\", Archive.items)\n            if (!Archive.confirmClear()) return\n            Archive.setEditorContents(Archive.textForLog()) \n        },\n\n        loadLog: function () {\n            if (!confirm(\"Replace all items with entered text for a log?\")) return\n            Archive.items = JSON.parse(Archive.editorContents)\n            // Update in case pasted contents\n            Archive.lastLoadedContents = Archive.editorContents\n        },\n\n        view: function() {\n            return m(\"main.ma2\", [\n                m(\"h1.title.bw24.b--solid.b--blue\", \"Item count \" + Archive.items.length),\n                m(\"textarea\", { value: Archive.editorContents, onchange: function (event) { Archive.editorContents = event.target.value } }),\n                m(\"br\"),\n                m(\"button.ma1\", { onclick: Archive.add }, \"Add\"),\n                m(\"button.ma1\", { onclick: Archive.clear }, \"Clear\"),\n                m(\"button.ma1\", { onclick: Archive.eval }, \"Eval\"),\n                m(\"br\"),\n                m(\"button.ma1\", { onclick: Archive.previous }, \"Previous\"),\n                m(\"button.ma1\", { onclick: Archive.next }, \"Next\"),\n                m(\"br\"),\n                m(\"button.ma1\", { onclick: Archive.showLog }, \"Show log\"),\n                m(\"button.ma1\", { onclick: Archive.loadLog }, \"Load log\")\n            ])\n        }\n    }\n\n    m.mount(root, Archive)\n})"
]

====

[
    "alert(\"Hello, world!\")",
    "1 + 1",
    "function my_add(a, b) { return a + b }\n\nmy_add(2, 3)\n",
    "// You will have to reload the editor or use the inspector to remove this widget\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\", {onclick: state.inc}, state.count)\n    }\n}\n\nvar div = document.createElement(\"div\")\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
    "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\",\n            m(\"button\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
    "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div.ba.ma3.pa3.bg-light-purple\",\n            m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
    "let div = document.createElement(\"div\")\n \nlet counter = 0\n\nfunction testButtonClicked(increment) {\n    console.log(\"testButtonClicked\")\n    counter += increment\n}\n\nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n      \"Hello world!\",\n      m(\"br\"),\n      \"counter: \" + counter,\n      m(\"button\", {onclick: testButtonClicked.bind(null, -1)}, \"-\"),\n      m(\"button\", {onclick: testButtonClicked.bind(null, 1)}, \"+\")\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
    "let div = document.createElement(\"div\")\n \nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n      m(\"iframe\", {src: \"http://www.calphysics.org/haisch/Patent%207379286\", width: 800, height: 600})\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
    "// Use the \"show\" convenience function to display a view made by a Mithril-generating function.\n// You can add extra Tachyons.js styling for the enclosing div as an optional second parameter.\nTwirlip7.show(() => {\n    return m(\"button.bg-red.pa2.br4\", { onclick: () => alert(\"Hello world\") }, \"Hello\")\n  }, \".bg-blue.br4\"\n)",
    "const draggables = { \n    1: {x: 0, y: 0},\n    2: {x: 0, y: 0},\n    3: {x: 0, y: 0},\n    4: {x: 0, y: 0},\n}\n\nlet dragStart\n\nTwirlip7.show(() => {\n    return m(\"div.bg-gray.h5.w100\", { ondragover: (e) => e.preventDefault(), ondrop: (e) => e.preventDefault() },\n        Object.keys(draggables).map((number) => m(\"div.di.ba.pa2.ma2.relative.bg-green\", {\n            draggable: true,\n            style: {\n                cursor: \"move\",\n                top: draggables[number].y + \"px\",\n                left: draggables[number].x + \"px\",\n            },\n            ondragstart: (e) => {\n                dragStart = {x: e.x, y: e.y}\n                e.dataTransfer.setData('text/plain', number)\n                e.dataTransfer.effectAllowed = \"move\"\n            },\n            ondragend: (e) => {\n                const d = draggables[number]\n                const s = dragStart;\n                draggables[number] = {x: d.x + e.x - s.x, y: d.y + e.y - s.y}\n            },\n            onclick: () => alert(\"Hello from draggable #\" + number)\n        }, \"Drag me! \" + number))\n      )\n    }, \".bg-blue.br4\"\n)"
]
